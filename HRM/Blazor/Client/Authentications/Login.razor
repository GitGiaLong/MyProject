@page "/login"
@using Core.Entities.Managements.User
@inject IAuthentication AccountService
@inject NavigationManager NavigationManager

<div class="loginbackground">
    <login-universe class="solar-system">
    <planet class="solar-system__sun"></planet>
    <circle class="solar-system__mercury-trajectory">
        <planet class="solar-system__mercury-trajectory__mercury"></planet>
    </circle>
    <circle class="solar-system__venus-trajectory">
        <planet class="solar-system__venus-trajectory__venus"></planet>
    </circle>
    <circle class="solar-system__earth-trajectory">
        <planet class="solar-system__earth-trajectory__earth"></planet>
    </circle>
    <circle class="solar-system__mars-trajectory">
        <planet class="solar-system__mars-trajectory__mars"></planet>
    </circle>
    </login-universe>
</div>

@* 
<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@user" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="user.Username" class="form-control" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="user.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="account/register" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
</div> *@

@code {
    private bool loading;
    User user = new User();
    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            AccountService.User = user;
            await AccountService.Login();
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            loading = false;
            StateHasChanged();
        }
    }
}
